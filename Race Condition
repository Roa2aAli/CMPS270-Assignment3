#include <stdio.h>
#include <time.h>
#include <pthread.h>
#include <stdlib.h>

int count = 0;
int array[10];

//Specifications:
//requires: a pointer to a void
//effects return the number of ones
//Testing is done better seen in the report //
void* count1s(void* temp) {
    int index = *(int*)temp;

    for (int i = 0; i < 5; i++) {
        if (array[index+i] == 1) {
            count++;
        }
    }
    printf("\nlocal number of ones: %d", count);
    free(temp);
}

int main(int argc) {

    printf("the array is : {");
    for (int i = 0; i < 10; i++) {
        array[i] = rand() % 5;
        printf("%d ", array[i]);
    }
    printf("}\n");

    pthread_t thread[2];//number of threads
    int i;
    for (i = 0; i < 2; i++) {
        int *a = malloc(sizeof(int));
        *a = i * 5;
        pthread_create(&thread[i], NULL, &count1s, a);

    }
    clock_t start = clock();
    for (i = 0; i < 2; i++) {
        pthread_join(thread[i], NULL);

    }
    clock_t end = clock();
    double time = ((double)end - start) / CLOCKS_PER_SEC;
    printf("\nTime taken by the thread : %f", time);

    return 0;
}
